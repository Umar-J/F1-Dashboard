package handlers

import (
	"encoding/json"
	"fmt"
	"io"
	"net/http"
)

type AutoGenerated struct {
	MRData struct {
		Xmlns          string `json:"xmlns"`
		Series         string `json:"series"`
		URL            string `json:"url"`
		Limit          string `json:"limit"`
		Offset         string `json:"offset"`
		Total          string `json:"total"`
		StandingsTable struct {
			Season         string `json:"season"`
			Round          string `json:"round"`
			StandingsLists []struct {
				Season          string `json:"season"`
				Round           string `json:"round"`
				DriverStandings []struct {
					Position     string `json:"position,omitempty"`
					PositionText string `json:"positionText"`
					Points       string `json:"points"`
					Wins         string `json:"wins"`
					Driver       struct {
						DriverID        string `json:"driverId"`
						PermanentNumber string `json:"permanentNumber"`
						Code            string `json:"code"`
						URL             string `json:"url"`
						GivenName       string `json:"givenName"`
						FamilyName      string `json:"familyName"`
						DateOfBirth     string `json:"dateOfBirth"`
						Nationality     string `json:"nationality"`
					} `json:"Driver"`
					Constructors []struct {
						ConstructorID string `json:"constructorId"`
						URL           string `json:"url"`
						Name          string `json:"name"`
						Nationality   string `json:"nationality"`
					} `json:"Constructors"`
				} `json:"DriverStandings"`
			} `json:"StandingsLists"`
		} `json:"StandingsTable"`
	} `json:"MRData"`
}

type SimpleLeaderboard struct {
	DriverName string
	Position   int
	Points     string
	Team       string
}

func StandingsHandler(writer http.ResponseWriter, request *http.Request) {
	writer.Write(*getDriverStandings())
}

func getDriverStandings() *[]byte {
	resp, err := http.Get("https://api.jolpi.ca/ergast/f1/current/driverstandings//?format=json")
	if err != nil {

	}
	defer resp.Body.Close()
	var leaderboard AutoGenerated
	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return nil
	}

	err = json.Unmarshal(body, &leaderboard)
	if err != nil {
		fmt.Println(err)
	}
	simpleLeaderboard := make([]SimpleLeaderboard, 0, 20)

	for i, data := range leaderboard.MRData.StandingsTable.StandingsLists[0].DriverStandings {
		simpleLeaderboard = append(simpleLeaderboard,
			SimpleLeaderboard{
				DriverName: fmt.Sprintf("%s %s", data.Driver.GivenName, data.Driver.FamilyName),
				Position:   i + 1,
				Points:     data.Points,
				Team:       data.Constructors[0].Name,
			})
	}

	jsonData, err := json.Marshal(simpleLeaderboard)
	if err != nil {
		fmt.Println(err)
	}

	return &jsonData
}
